// Code generated by mockery v1.0.0. DO NOT EDIT.

// Generated: please do not edit by hand

package mocks

import do "github.com/digitalocean/doctl/do"
import godo "github.com/digitalocean/godo"
import mock "github.com/stretchr/testify/mock"

// CertificatesService is an autogenerated mock type for the CertificatesService type
type CertificatesService struct {
	mock.Mock
}

// Create provides a mock function with given fields: cr
func (_m *CertificatesService) Create(cr *godo.CertificateRequest) (*do.Certificate, error) {
	ret := _m.Called(cr)

	var r0 *do.Certificate
	if rf, ok := ret.Get(0).(func(*godo.CertificateRequest) *do.Certificate); ok {
		r0 = rf(cr)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*do.Certificate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*godo.CertificateRequest) error); ok {
		r1 = rf(cr)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: cID
func (_m *CertificatesService) Delete(cID string) error {
	ret := _m.Called(cID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(cID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields: cID
func (_m *CertificatesService) Get(cID string) (*do.Certificate, error) {
	ret := _m.Called(cID)

	var r0 *do.Certificate
	if rf, ok := ret.Get(0).(func(string) *do.Certificate); ok {
		r0 = rf(cID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*do.Certificate)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// List provides a mock function with given fields:
func (_m *CertificatesService) List() (do.Certificates, error) {
	ret := _m.Called()

	var r0 do.Certificates
	if rf, ok := ret.Get(0).(func() do.Certificates); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(do.Certificates)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
